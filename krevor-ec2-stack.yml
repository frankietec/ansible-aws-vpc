---
- name: krevor ec2 stack
  hosts: localhost
  connection: local
  gather_facts: no
  tasks:
    - name: import vpc setup variables
      include_vars: vars/output_vars

    - name: import krevor stack variables
      include_vars: vars/krevorstacksetup

   # - name: create ec2 key
    #  ec2_key:
     #   name: krevorkey
      #  region: "{{region}}"
      #register: krevorkey_out

    #- name: save private key into loginkey_krevor.pem
     # copy:
      #  content: "{{krevorkey_out.key.id}}"
       # dest: "./loginkey_krevor.pem"
       # mode: 0600
     # when: krevorkey_out.changed

    - name: Create a new key pair
      amazon.aws.ec2_key:
        name: new_krevor_key
        region: "{{ region }}"
        state: present
        force: yes
      register: new_krevor_key_out

    - name: Save the new private key into loginkey_krevor.pem
      copy:
        content: "{{ new_krevor_key_out.key.private_key }}"
        dest: "./new_loginkey_krevor.pem"
        mode: '0600'
      when: new_krevor_key_out.changed


    - name: Create security group for ELB(Elastic Load Balancer)
      amazon.aws.ec2_security_group:
        name: krevorELB-sg
        description: allow port 80 from everywhere and all ports from sg
        vpc_id: "{{vpcid}}"
        region: "{{region}}"
        rules:
          - proto: tcp
            ports:
              - 80
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 80
      register: krevorELBSG_out

    - name: Create security group for krevor stack
      amazon.aws.ec2_security_group:
        name: krevorstack-sg
        description: allow port 22 from everywhere and all ports from sg
        vpc_id: "{{vpcid}}"
        region: "{{region}}"
        purge_rules: no
        rules:
          - proto: tcp
            ports:
              - 80
            rule_desc: allow all on port 80
            group_id: "{{krevorELBSG_out.group_id}}"


          - proto: tcp
            ports:
              - 22
            rule_desc: allow all on port 22
            group_id: "{{BastionSGid}}"
      register: krevorstackSG_out

    - name: update security group with own sg id
      amazon.aws.ec2_security_group:
        name: krevorstack-sg
        description: allow port 22k from everywhere and all ports from sg
        vpc_id: "{{vpcid}}"
        region: "{{region}}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{krevorstackSG_out.group_id}}"


    - name: Creating nginx web01
      amazon.aws.ec2_instance:
        name: "web01"
        key_name: "vprofile-key"
        region: "{{region}}"
        vpc_subnet_id: "{{privsub1id}}"
        instance_type: t2.micro
        security_group: "{{krevorstackSG_out.group_id}}"
        network:
          assign_public_ip: true
        image_id: "{{nginx_ami}}"
        exact_count: 1
        wait: yes
        wait_timeout: 300
        tags:
          Environment: Deploy
      register: web01_out


    - name: Creating Tomcat App01
      amazon.aws.ec2_instance:
        name: "app01"
        key_name: "vprofile-key"
        region: "{{region}}"
        vpc_subnet_id: "{{privsub1id}}"
        instance_type: t2.micro
        security_group: "{{krevorstackSG_out.group_id}}"
        network:
          assign_public_ip: true
        image_id: "{{tomcat_ami}}"
        exact_count: 1
        wait: yes
        wait_timeout: 300
        tags:
          Environment: Deploy
      register: app01_out

    - name: Creating memcache mc01
      amazon.aws.ec2_instance:
        name: "mc01"
        key_name: "vprofile-key"
        region: "{{region}}"
        vpc_subnet_id: "{{privsub1id}}"
        instance_type: t2.micro
        security_group: "{{krevorstackSG_out.group_id}}"
        network:
          assign_public_ip: true
        image_id: "{{memcache_ami}}"
        exact_count: 1
        wait: yes
        wait_timeout: 300
        tags:
          Environment: Deploy
      register: mc01_out


    - name: Creating rabbitmq rmq01
      amazon.aws.ec2_instance:
        name: "rmq01"
        key_name: "vprofile-key"
        region: "{{region}}"
        vpc_subnet_id: "{{privsub1id}}"
        instance_type: t2.micro
        security_group: "{{krevorstackSG_out.group_id}}"
        network:
          assign_public_ip: true
        image_id: "{{rmq_ami}}"
        exact_count: 1
        wait: yes
        wait_timeout: 300
        tags:
          Environment: Deploy
      register: rmq01_out


    - name: Creating mysql db01
      amazon.aws.ec2_instance:
        name: "db01"
        key_name: "vprofile-key"
        region: "{{region}}"
        vpc_subnet_id: "{{privsub1id}}"
        instance_type: t2.micro
        security_group: "{{krevorstackSG_out.group_id}}"
        network:
          assign_public_ip: true
        image_id: "{{mysql_ami}}"
        exact_count: 1
        wait: yes
        wait_timeout: 300
        tags:
          Environment: Deploy
      register: db01_out

    - debug:
        var: "{{ db01_out.instances[0].private_ip_address }}"

    - debug:
        var: db01_out.instance_ids[0]


    - amazon.aws.elb_classic_lb:
        name: "krevor-elb"
        scheme: internal
        state: present
        region: "{{region}}"
        instance_ids:
          - "{{web01_out.instance_ids[0]}}"
        purge_instance_ids: true
        security_group_ids: "{{krevorELBSG_out.group_id}}"
        subnets:
          - "{{pubsub1id}}"
          - "{{pubsub2id}}"
          - "{{pubsub3id}}"

        listeners:
          - protocol: http # options are http, https, ssl, tcp
            load_balancer_port: 80
            instance_port: 80

    - name: Insert/Update Host IP and name in provision-stack/group_vars/hostip
      ansible.builtin.blockinfile:
        path: provision-stack/group_vars/hostip
        backup: yes
        append_newline: true
        prepend_newline: true
        block: |
          web01_ip: {{ web01_out.instances[0].private_ip_address }}
          mc01_ip:  {{ mc01_out.instances[0].private_ip_address }}
          rmq01_ip: {{ rmq01_out.instances[0].private_ip_address }}
          app01_ip: {{ app01_out.instances[0].private_ip_address }}
          db01_ip: {{ db01_out.instances[0].private_ip_address }}
      

    - name: Save the new private key into the provision-stack directory
      copy:
        content: "{{ new_krevor_key_out.key.private_key }}"
        dest: provision-stack/new_loginkey_krevor.pem
        mode: '0600'
      when: new_krevor_key_out.changed


    - name: Insert/Update Inventory file  in provision-stack/inventory-krevor
      ansible.builtin.blockinfile:
        path: provision-stack/inventory-krevor
        backup: yes
        append_newline: true
        prepend_newline: true
        block: |
          Web01 ansible_host= {{ web01_out.instances[0].private_ip_address }}
          mc01 ansible_host={{ web01_out.instances[0].private_ip_address }}
          rmq01 ansible_host={{ web01_out.instances[0].private_ip_address }}
          app01 ansible_host={{ web01_out.instances[0].private_ip_address }}
          db01 ansible_host={{ web01_out.instances[0].private_ip_address }}
          cntrl ansible_host=127.0.0.1 ansible_connection=local

          [websrvgrp]
          web01

          [mcsrvgrp]
          mc01

          [rmqsrvgrp]
          rmq01

          [appsrvgrp]
          app01

          [dbsrvgrp]
          db01

          [control]
          cntrl

          [stack_inst:children]
          websrvgrp
          mcsrvgrp
          rmqsrvgrp
          appsrvgrp
          dbsrvgrp

          [stack_inst:var]
          ansible_user= ubuntu
          ansible_ssh_private_key_file=loginkey_krevor.pem
          #anible_python_interpreter= usr/bin/python3













              
              
